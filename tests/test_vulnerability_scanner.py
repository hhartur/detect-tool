import unittest
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from backend.vulnerability_scanner import VulnerabilityScanner

class TestVulnerabilityScanner(unittest.TestCase):
    def setUp(self):
        self.scanner = VulnerabilityScanner()
        
    def test_scan_ddos(self):
        result = self.scanner.scan_ddos("https://example.com")
        self.assertIn("type", result)
        self.assertIn("target", result)
        self.assertIn("status", result)
        self.assertIn("severity", result)
        self.assertIn("details", result)
        self.assertEqual(result["type"], "DDoS")
        self.assertEqual(result["target"], "https://example.com")
        self.assertIn(result["status"], ["Vulnerável", "Não Vulnerável"])
        
    def test_scan_backend_protection(self):
        result = self.scanner.scan_backend_protection("https://example.com")
        self.assertIn("type", result)
        self.assertIn("target", result)
        self.assertIn("status", result)
        self.assertIn("severity", result)
        self.assertIn("details", result)
        self.assertEqual(result["type"], "Proteção de Backend")
        self.assertEqual(result["target"], "https://example.com")
        self.assertIn(result["status"], ["Vulnerável", "Não Vulnerável"])
        
    def test_scan_route_failures(self):
        result = self.scanner.scan_route_failures("https://example.com")
        self.assertIn("type", result)
        self.assertIn("target", result)
        self.assertIn("status", result)
        self.assertIn("severity", result)
        self.assertIn("details", result)
        self.assertEqual(result["type"], "Falhas de Rotas")
        self.assertEqual(result["target"], "https://example.com")
        self.assertIn(result["status"], ["Vulnerável", "Não Vulnerável"])
        
    def test_scan_xos_attack(self):
        result = self.scanner.scan_xos_attack("https://example.com")
        self.assertIn("type", result)
        self.assertIn("target", result)
        self.assertIn("status", result)
        self.assertIn("severity", result)
        self.assertIn("details", result)
        self.assertEqual(result["type"], "Ataque XoS")
        self.assertEqual(result["target"], "https://example.com")
        self.assertIn(result["status"], ["Vulnerável", "Não Vulnerável"])
        
    def test_scan_other_vulnerabilities(self):
        result = self.scanner.scan_other_vulnerabilities("https://example.com")
        self.assertIn("type", result)
        self.assertIn("target", result)
        self.assertIn("status", result)
        self.assertIn("severity", result)
        self.assertIn("details", result)
        self.assertEqual(result["type"], "Outras Vulnerabilidades")
        self.assertEqual(result["target"], "https://example.com")
        self.assertIn(result["status"], ["Vulnerável", "Não Vulnerável"])

if __name__ == "__main__":
    unittest.main()

